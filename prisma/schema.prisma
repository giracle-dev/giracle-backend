generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  name                String?               @unique
  selfIntroduction    String
  isBanned            Boolean               @default(false)
  password            Password?
  Token               Token[]
  Channel             Channel[]
  RoleInfo            RoleInfo[]
  RoleLink            RoleLink[]
  ChannelJoin         ChannelJoin[]
  Message             Message[]
  Invitation          Invitation[]
  MessageReadTime     MessageReadTime[]
  MessageFileAttached MessageFileAttached[]
  Inbox               Inbox[]
}

model Password {
  id       Int    @id @default(autoincrement())
  password String
  salt     String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ChannelViewableRole {
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id])
  roleId    String
  role      RoleInfo @relation(fields: [roleId], references: [id])

  @@id([channelId, roleId])
  @@index([roleId])
  @@index([channelId])
}

model ChannelJoin {
  channelJoinedAt DateTime @default(now())
  channelId       String
  channel         Channel  @relation(fields: [channelId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  @@id([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

model Channel {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String
  isArchived           Boolean               @default(false)
  createdUserId        String
  user                 User                  @relation(fields: [createdUserId], references: [id])
  ChannelJoin          ChannelJoin[]
  Message              Message[]
  ChannelViewableRole  ChannelViewableRole[]
  MessageReadTime      MessageReadTime[]
  MessageFileAttached  MessageFileAttached[]
  ChannelJoinOnDefault ChannelJoinOnDefault?
}

model MessageUrlPreview {
  id          Int     @id @default(autoincrement())
  url         String
  type        String
  messageId   String
  message     Message @relation(fields: [messageId], references: [id])
  title       String
  description String?
  faviconLink String?
  imageLink   String?
}

model MessageReadTime {
  readTime  DateTime
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
  @@index([userId])
  @@index([channelId])
}

model MessageFileAttached {
  id             String   @id @default(uuid())
  channelId      String
  channel        Channel  @relation(fields: [channelId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  actualFileName String
  savedFileName  String
  size           Int
  type           String
  Message        Message? @relation(fields: [messageId], references: [id])
  messageId      String?

  @@index([channelId])
  @@index([userId])
}

model Inbox {
  type      String
  happendAt DateTime @default(now())
  messageId String
  Message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@id([messageId, userId])
  @@index([userId])
}

model Message {
  id                  String                @id @default(uuid())
  content             String
  isSystemMessage     Boolean               @default(false)
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  channelId           String
  channel             Channel               @relation(fields: [channelId], references: [id])
  createdAt           DateTime              @default(now())
  MessageUrlPreview   MessageUrlPreview[]
  MessageFileAttached MessageFileAttached[]
  Inbox               Inbox[]

  @@index([channelId])
  @@index([userId])
}

model RoleLink {
  roleId       String
  role         RoleInfo @relation(fields: [roleId], references: [id])
  roleLinkedAt DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RoleInfo {
  id            String   @id @default(uuid())
  name          String   @unique
  createdUserId String
  color         String   @default("#fff")
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [createdUserId], references: [id])

  manageServer  Boolean @default(false)
  manageChannel Boolean @default(false)
  manageUser    Boolean @default(false)
  manageRole    Boolean @default(false)

  RoleLink            RoleLink[]
  ChannelViewableRole ChannelViewableRole[]
}

model Invitation {
  id            Int      @id @default(autoincrement())
  inviteCode    String   @unique
  createdUserId String
  expireDate    DateTime @default(dbgenerated("(datetime('now', '+1 day'))"))
  user          User     @relation(fields: [createdUserId], references: [id])
  usedCount     Int      @default(0)
}

model ChannelJoinOnDefault {
  id        Int     @id @default(autoincrement())
  channelId String  @unique
  channel   Channel @relation(fields: [channelId], references: [id])
}

model ServerConfig {
  id           Int    @id @default(autoincrement())
  name         String
  introduction String

  RegisterAvailable         Boolean @default(true)
  RegisterInviteOnly        Boolean @default(true)
  RegisterAnnounceChannelId String  @default("")
  MessageMaxLength          Int     @default(3000)
}
