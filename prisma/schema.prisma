generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  name                String?               @unique
  selfIntroduction    String
  isBanned            Boolean               @default(false)
  Channel             Channel[]
  ChannelJoin         ChannelJoin[]
  CustomEmoji         CustomEmoji[]
  Inbox               Inbox[]
  Invitation          Invitation[]
  Message             Message[]
  MessageFileAttached MessageFileAttached[]
  MessageReaction     MessageReaction[]
  MessageReadTime     MessageReadTime[]
  password            Password?
  RoleInfo            RoleInfo[]
  RoleLink            RoleLink[]
  Token               Token[]
}

model Password {
  id       Int    @id @default(autoincrement())
  password String
  salt     String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ChannelViewableRole {
  channelId String
  roleId    String
  role      RoleInfo @relation(fields: [roleId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@id([channelId, roleId])
  @@index([roleId])
  @@index([channelId])
}

model ChannelJoin {
  channelJoinedAt DateTime @default(now())
  channelId       String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  channel         Channel  @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

model Channel {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String
  isArchived           Boolean               @default(false)
  createdUserId        String
  user                 User                  @relation(fields: [createdUserId], references: [id])
  ChannelJoin          ChannelJoin[]
  ChannelJoinOnDefault ChannelJoinOnDefault?
  ChannelViewableRole  ChannelViewableRole[]
  Message              Message[]
  MessageFileAttached  MessageFileAttached[]
  MessageReaction      MessageReaction[]
  MessageReadTime      MessageReadTime[]
}

model MessageUrlPreview {
  id          Int     @id @default(autoincrement())
  url         String
  type        String
  messageId   String
  title       String
  description String?
  faviconLink String?
  imageLink   String?
  videoLink   String?
  message     Message @relation(fields: [messageId], references: [id])
}

model MessageReadTime {
  readTime  DateTime
  channelId String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@id([channelId, userId])
  @@index([userId])
  @@index([channelId])
}

model MessageFileAttached {
  id             String   @id @default(uuid())
  channelId      String
  userId         String
  actualFileName String
  savedFileName  String
  size           Int
  type           String
  messageId      String?
  Message        Message? @relation(fields: [messageId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  channel        Channel  @relation(fields: [channelId], references: [id])

  @@index([channelId])
  @@index([messageId])
  @@index([userId])
}

model MessageReaction {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  emojiCode String
  messageId String?
  Message   Message? @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@index([channelId])
  @@index([messageId])
  @@index([userId])
}

model Inbox {
  type      String
  happendAt DateTime @default(now())
  messageId String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  Message   Message  @relation(fields: [messageId], references: [id])

  @@id([messageId, userId])
  @@index([userId])
}

model Message {
  id                  String                @id @default(uuid())
  content             String
  isSystemMessage     Boolean               @default(false)
  isEdited            Boolean               @default(false)
  replyingMessageId   String?
  userId              String
  channelId           String
  createdAt           DateTime              @default(now())
  Inbox               Inbox[]
  channel             Channel               @relation(fields: [channelId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  MessageFileAttached MessageFileAttached[]
  MessageReaction     MessageReaction[]
  MessageUrlPreview   MessageUrlPreview[]

  @@index([channelId])
  @@index([userId])
}

model CustomEmoji {
  id             String @id @default(uuid())
  code           String @unique
  uploadedUserId String
  user           User   @relation(fields: [uploadedUserId], references: [id])

  @@index([uploadedUserId])
}

model RoleLink {
  roleId       String
  roleLinkedAt DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  role         RoleInfo @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RoleInfo {
  id                  String                @id @default(uuid())
  name                String                @unique
  createdUserId       String
  color               String                @default("#fff")
  createdAt           DateTime              @default(now())
  manageServer        Boolean               @default(false)
  manageChannel       Boolean               @default(false)
  manageUser          Boolean               @default(false)
  manageRole          Boolean               @default(false)
  manageEmoji         Boolean               @default(false)
  ChannelViewableRole ChannelViewableRole[]
  user                User                  @relation(fields: [createdUserId], references: [id])
  RoleLink            RoleLink[]
}

model Invitation {
  id            Int    @id @default(autoincrement())
  inviteCode    String @unique
  createdUserId String
  usedCount     Int    @default(0)
  user          User   @relation(fields: [createdUserId], references: [id])
}

model ChannelJoinOnDefault {
  id        Int     @id @default(autoincrement())
  channelId String  @unique
  channel   Channel @relation(fields: [channelId], references: [id])
}

model ServerConfig {
  id                        Int     @id @default(autoincrement())
  name                      String
  introduction              String
  RegisterAvailable         Boolean @default(true)
  RegisterInviteOnly        Boolean @default(true)
  RegisterAnnounceChannelId String  @default("")
  MessageMaxLength          Int     @default(3000)
}
