import apn from 'apn';
import { db } from '../../index';

// APNsË®≠ÂÆö„ÅÆÊ§úË®º
const isAPNsConfigured = Boolean(
  Bun.env.APNS_KEY_ID &&
  Bun.env.APNS_TEAM_ID &&
  Bun.env.APNS_KEY_PATH &&
  Bun.env.APNS_TOPIC
);

// APNs ProviderÂàùÊúüÂåñÔºà„Çµ„Éº„Éê„ÉºËµ∑ÂãïÊôÇ„Å´1Âõû„Å†„ÅëÔºâ
let apnProvider: apn.Provider | null = null;

if (isAPNsConfigured) {
  try {
    apnProvider = new apn.Provider({
      token: {
        key: Bun.env.APNS_KEY_PATH!,
        keyId: Bun.env.APNS_KEY_ID!,
        teamId: Bun.env.APNS_TEAM_ID!,
      },
      production: Bun.env.APNS_PRODUCTION === 'true',
    });

    console.log('‚úÖ APNs Provider initialized');
    console.log('   Production mode:', Bun.env.APNS_PRODUCTION === 'true');
    console.log('   Key ID:', Bun.env.APNS_KEY_ID);
    console.log('   Team ID:', Bun.env.APNS_TEAM_ID);
    console.log('   Topic:', Bun.env.APNS_TOPIC);
  } catch (error) {
    console.error('‚ùå Failed to initialize APNs Provider:', error);
    apnProvider = null;
  }
} else {
  console.warn('‚ö†Ô∏è APNs is NOT configured (push notifications disabled)');
  console.warn('   Please set the following environment variables:');
  console.warn('   - APNS_KEY_ID');
  console.warn('   - APNS_TEAM_ID');
  console.warn('   - APNS_KEY_PATH');
  console.warn('   - APNS_TOPIC');
  console.warn('   See documentation for setup instructions.');
}

export interface NotificationPayload {
  title: string;
  body: string;
  data?: Record<string, any>;
  badge?: number;
  sound?: string;
}

export class NotificationService {
  /**
   * ÁâπÂÆö„É¶„Éº„Ç∂„Éº„Å´„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÇíÈÄÅ‰ø°
   */
  async sendToUser(userId: string, payload: NotificationPayload) {
    try {
      // 1. „É¶„Éº„Ç∂„Éº„ÅÆÈÄöÁü•Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç
      const settings = await db.notificationSetting.findUnique({
        where: { userId },
      });

      if (!settings) {
        console.log(`‚ö†Ô∏è No notification settings for user ${userId}, creating default...`);
        // „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Çí‰ΩúÊàê
        await db.notificationSetting.create({
          data: { userId },
        });
      }

      // 2. „Éá„Éê„Ç§„Çπ„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæóÔºàiOS„ÅÆ„ÅøÔºâ
      const tokens = await db.deviceToken.findMany({
        where: {
          userId,
          platform: 'ios',
        },
      });

      if (tokens.length === 0) {
        console.log(`üì± No device tokens found for user ${userId}`);
        return;
      }

      console.log(`üì§ Sending notification to ${tokens.length} device(s) for user ${userId}`);

      // 3. ÂêÑ„Éá„Éê„Ç§„Çπ„Å´ÈÄÅ‰ø°
      const results = [];
      for (const deviceToken of tokens) {
        try {
          await this.sendAPNs(deviceToken.token, payload);
          console.log(`‚úÖ Notification sent to ${deviceToken.deviceName || 'device'}`);
          results.push({ success: true, device: deviceToken.deviceName });
        } catch (error: any) {
          console.error(`‚ùå Failed to send notification to ${deviceToken.deviceName}:`, error);

          // „Éà„Éº„ÇØ„É≥„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅØÂâäÈô§
          if (error.reason === 'BadDeviceToken' || error.reason === 'Unregistered') {
            await db.deviceToken.delete({
              where: { id: deviceToken.id },
            });
            console.log(`üóëÔ∏è Removed invalid token for ${deviceToken.deviceName}`);
          }

          results.push({ success: false, device: deviceToken.deviceName, error: error.reason });
        }
      }

      return results;
    } catch (error) {
      console.error('‚ùå Error in sendToUser:', error);
      throw error;
    }
  }

  /**
   * APNsÁµåÁî±„ÅßÈÄÅ‰ø°
   */
  private async sendAPNs(token: string, payload: NotificationPayload) {
    // APNs„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if (!apnProvider) {
      console.warn('‚ö†Ô∏è APNs not configured, skipping push notification');
      return;
    }

    const notification = new apn.Notification();

    // ÈÄöÁü•ÂÜÖÂÆπ
    notification.alert = {
      title: payload.title,
      body: payload.body,
    };

    // „Éê„ÉÉ„Ç∏Êï∞Ôºà„Ç¢„Éó„É™„Ç¢„Ç§„Ç≥„É≥„ÅÆËµ§„ÅÑÊï∞Â≠óÔºâ
    notification.badge = payload.badge || 0;

    // ÈÄöÁü•Èü≥
    notification.sound = payload.sound || 'default';

    // „Ç¢„Éó„É™„ÅÆBundle ID
    notification.topic = Bun.env.APNS_TOPIC || '';

    // „Ç´„Çπ„Çø„É†„Éá„Éº„ÇøÔºà„Çø„ÉÉ„ÉóÊôÇ„Å´‰ΩøÁî®Ôºâ
    notification.payload = payload.data || {};

    // ÊúâÂäπÊúüÈôêÔºà24ÊôÇÈñìÔºâ
    notification.expiry = Math.floor(Date.now() / 1000) + 3600 * 24;

    // ÈÄÅ‰ø°
    const result = await apnProvider.send(notification, token);

    // „Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
    if (result.failed.length > 0) {
      const failure = result.failed[0];
      throw {
        reason: failure.response?.reason,
      };
    }

    return result;
  }

  /**
   * „ÉÅ„É£„É≥„Éç„É´„ÅÆ„É°„É≥„Éê„ÉºÂÖ®Âì°„Å´ÈÄÅ‰ø°
   */
  async sendToChannelMembers(
    channelId: string,
    excludeUserId: string | null,
    payload: NotificationPayload
  ) {
    try {
      // „ÉÅ„É£„É≥„Éç„É´„É°„É≥„Éê„Éº„ÇíÂèñÂæó
      const members = await db.channelJoin.findMany({
        where: {
          channelId,
          userId: { not: excludeUserId || undefined },
        },
        select: { userId: true },
      });

      console.log(`üì£ Sending notification to ${members.length} channel members`);

      // ÂêÑ„É°„É≥„Éê„Éº„Å´ÈÄÅ‰ø°Ôºà‰∏¶ÂàóÂá¶ÁêÜÔºâ
      const promises = members.map(member =>
        this.sendToUser(member.userId, payload)
      );

      const results = await Promise.allSettled(promises);

      const successCount = results.filter(r => r.status === 'fulfilled').length;
      console.log(`‚úÖ Sent to ${successCount}/${members.length} members`);

      return results;
    } catch (error) {
      console.error('‚ùå Error in sendToChannelMembers:', error);
      throw error;
    }
  }

  /**
   * „É°„É≥„Ç∑„Éß„É≥„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„Å´ÈÄÅ‰ø°
   */
  async sendMentionNotification(
    mentionedUserId: string,
    fromUserId: string,
    channelId: string,
    messageContent: string
  ) {
    try {
      const [fromUser, channel] = await Promise.all([
        db.user.findUnique({ where: { id: fromUserId } }),
        db.channel.findUnique({ where: { id: channelId } }),
      ]);

      await this.sendToUser(mentionedUserId, {
        title: `${fromUser?.name || 'Someone'} mentioned you in #${channel?.name}`,
        body: messageContent.substring(0, 100),
        data: {
          type: 'mention',
          channelId,
          fromUserId,
        },
        sound: 'default',
      });

      console.log(`üí¨ Mention notification sent to ${mentionedUserId}`);
    } catch (error) {
      console.error('‚ùå Error in sendMentionNotification:', error);
    }
  }

  /**
   * „É™„Ç¢„ÇØ„Ç∑„Éß„É≥ÈÄöÁü•
   */
  async sendReactionNotification(
    targetUserId: string,
    fromUserId: string,
    messageId: string,
    emojiCode: string
  ) {
    try {
      const fromUser = await db.user.findUnique({ where: { id: fromUserId } });

      await this.sendToUser(targetUserId, {
        title: `${fromUser?.name || 'Someone'} reacted to your message`,
        body: `${emojiCode}`,
        data: {
          type: 'reaction',
          messageId,
          fromUserId,
          emojiCode,
        },
        sound: 'default',
      });

      console.log(`üëç Reaction notification sent to ${targetUserId}`);
    } catch (error) {
      console.error('‚ùå Error in sendReactionNotification:', error);
    }
  }
}

export const notificationService = new NotificationService();
